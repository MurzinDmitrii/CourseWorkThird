//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Курсач.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class КурсоваяEntities2 : DbContext
    {
        public КурсоваяEntities2()
            : base("name=КурсоваяEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Application> Application { get; set; }
        public virtual DbSet<Approval> Approval { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<Benefits> Benefits { get; set; }
        public virtual DbSet<BenefitsCategory> BenefitsCategory { get; set; }
        public virtual DbSet<Busyness> Busyness { get; set; }
        public virtual DbSet<Card> Card { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<ClientRequsites> ClientRequsites { get; set; }
        public virtual DbSet<Desiase> Desiase { get; set; }
        public virtual DbSet<Document> Document { get; set; }
        public virtual DbSet<Education> Education { get; set; }
        public virtual DbSet<EnterData> EnterData { get; set; }
        public virtual DbSet<FamilyPosition> FamilyPosition { get; set; }
        public virtual DbSet<Insurance> Insurance { get; set; }
        public virtual DbSet<InvalidGroup> InvalidGroup { get; set; }
        public virtual DbSet<Passport> Passport { get; set; }
        public virtual DbSet<PayWay> PayWay { get; set; }
        public virtual DbSet<Polis> Polis { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<Worker> Worker { get; set; }
        public virtual DbSet<Requsites> Requsites { get; set; }
    
        public virtual int AddApplication(Nullable<int> documentId, Nullable<System.DateTime> documentDate, Nullable<int> serviceId, Nullable<System.DateTime> applicationDate, Nullable<int> payWayId)
        {
            var documentIdParameter = documentId.HasValue ?
                new ObjectParameter("DocumentId", documentId) :
                new ObjectParameter("DocumentId", typeof(int));
    
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var payWayIdParameter = payWayId.HasValue ?
                new ObjectParameter("PayWayId", payWayId) :
                new ObjectParameter("PayWayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddApplication", documentIdParameter, documentDateParameter, serviceIdParameter, applicationDateParameter, payWayIdParameter);
        }
    
        public virtual int AddDocument(Nullable<System.DateTime> documentDate, Nullable<int> clientId, Nullable<int> workerId)
        {
            var documentDateParameter = documentDate.HasValue ?
                new ObjectParameter("DocumentDate", documentDate) :
                new ObjectParameter("DocumentDate", typeof(System.DateTime));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var workerIdParameter = workerId.HasValue ?
                new ObjectParameter("WorkerId", workerId) :
                new ObjectParameter("WorkerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddDocument", documentDateParameter, clientIdParameter, workerIdParameter);
        }
    }
}
